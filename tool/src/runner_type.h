/**
 * Nescc
 * Copyright (C) 2017-2018 David Jolly
 *
 * Nescc is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Nescc is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef NESCC_TOOL_RUNNER_TYPE_H_
#define NESCC_TOOL_RUNNER_TYPE_H_

#include <map>
#include <set>
#include <vector>
#include "../../include/exception.h"

namespace nescc {

	namespace tool {

		#define NESCC_TOOL_RUNNER_HEADER "[NESCC::TOOL::RUNNER]"
#ifndef NDEBUG
		#define NESCC_TOOL_RUNNER_EXCEPTION_HEADER NESCC_TOOL_RUNNER_HEADER " "
#else
		#define NESCC_TOOL_RUNNER_EXCEPTION_HEADER
#endif // NDEBUG

		enum {
			NESCC_TOOL_RUNNER_EXCEPTION_ARGUMENT_MALFORMED = 0,
			NESCC_TOOL_RUNNER_EXCEPTION_ARGUMENT_MISSING,
			NESCC_TOOL_RUNNER_EXCEPTION_ARGUMENT_UNSUPPORTED,
			NESCC_TOOL_RUNNER_EXCEPTION_PATH_REASSIGNED,
			NESCC_TOOL_RUNNER_EXCEPTION_PATH_UNASSIGNED,
			NESCC_TOOL_RUNNER_EXCEPTION_UNINITIALIZED,
		};

		#define NESCC_TOOL_RUNNER_EXCEPTION_MAX NESCC_TOOL_RUNNER_EXCEPTION_UNINITIALIZED

		static const std::string NESCC_TOOL_RUNNER_EXCEPTION_STR[] = {
			NESCC_TOOL_RUNNER_EXCEPTION_HEADER "Malformed argument",
			NESCC_TOOL_RUNNER_EXCEPTION_HEADER "Missing argument",
			NESCC_TOOL_RUNNER_EXCEPTION_HEADER "Unsupported argument",
			NESCC_TOOL_RUNNER_EXCEPTION_HEADER "Path reassigned",
			NESCC_TOOL_RUNNER_EXCEPTION_HEADER "Path unassigned",
			NESCC_TOOL_RUNNER_EXCEPTION_HEADER "Run is uninitialized",
			};

		#define NESCC_TOOL_RUNNER_EXCEPTION_STRING(_TYPE_) \
			(((_TYPE_) > NESCC_TOOL_RUNNER_EXCEPTION_MAX) ? EXCEPTION_UNKNOWN : \
				STRING_CHECK(NESCC_TOOL_RUNNER_EXCEPTION_STR[_TYPE_]))

		#define THROW_NESCC_TOOL_RUNNER_EXCEPTION(_EXCEPT_) \
			THROW_NESCC_TOOL_RUNNER_EXCEPTION_FORMAT(_EXCEPT_, "", "")
		#define THROW_NESCC_TOOL_RUNNER_EXCEPTION_FORMAT(_EXCEPT_, _FORMAT_, ...) \
			THROW_EXCEPTION_FORMAT(NESCC_TOOL_RUNNER_EXCEPTION_STRING(_EXCEPT_), \
				_FORMAT_, __VA_ARGS__)

		#define ARGUMENT_CLEAR "clear"
		#define ARGUMENT_COLUMN_WIDTH 16
		#define ARGUMENT_COLUMN_WIDTH_SUB 72
		#define ARGUMENT_DELIMITER '-'

		enum {
#ifndef NDEBUG
			ARGUMENT_DEBUG = 0,
#endif // NDEBUG
			ARGUMENT_HELP,
			ARGUMENT_INTERACTIVE,
			ARGUMENT_VERSION,
		};

		#define ARGUMENT_MAX ARGUMENT_VERSION
		#define ARGUMENT_MIN 2

		static const std::string ARGUMENT_STR[] = {
#ifndef NDEBUG
			"d",
#endif // NDEBUG
			"h", "i", "v",
			};

		#define ARGUMENT_STRING(_TYPE_) \
			(((_TYPE_) > ARGUMENT_MAX) ? STRING_UNKNOWN : \
				STRING_CHECK(ARGUMENT_STR[_TYPE_]))

		static const std::string ARGUMENT_STR_LONG[] = {
#ifndef NDEBUG
			"debug",
#endif // NDEBUG
			"help", "interactive", "version",
			};

		#define ARGUMENT_STRING_LONG(_TYPE_) \
			(((_TYPE_) > ARGUMENT_MAX) ? STRING_UNKNOWN : \
				STRING_CHECK(ARGUMENT_STR_LONG[_TYPE_]))

		static const std::string ARGUMENT_STR_DESC[] = {
#ifndef NDEBUG
			"Run in debug mode",
#endif // NDEBUG
			"Display help information",
			"Run in interactive mode",
			"Display version information",
			};

		#define ARGUMENT_STRING_DESCRIPTION(_TYPE_) \
			(((_TYPE_) > ARGUMENT_MAX) ? STRING_UNKNOWN : \
				STRING_CHECK(ARGUMENT_STR_DESC[_TYPE_]))

		static const std::map<std::string, uint32_t> ARGUMENT_MAP = {
#ifndef NDEBUG
			std::make_pair(ARGUMENT_STRING(ARGUMENT_DEBUG), ARGUMENT_DEBUG),
			std::make_pair(ARGUMENT_STRING_LONG(ARGUMENT_DEBUG), ARGUMENT_DEBUG),
#endif // NDEBUG
			std::make_pair(ARGUMENT_STRING(ARGUMENT_HELP), ARGUMENT_HELP),
			std::make_pair(ARGUMENT_STRING_LONG(ARGUMENT_HELP), ARGUMENT_HELP),
			std::make_pair(ARGUMENT_STRING(ARGUMENT_INTERACTIVE), ARGUMENT_INTERACTIVE),
			std::make_pair(ARGUMENT_STRING_LONG(ARGUMENT_INTERACTIVE), ARGUMENT_INTERACTIVE),
			std::make_pair(ARGUMENT_STRING(ARGUMENT_VERSION), ARGUMENT_VERSION),
			std::make_pair(ARGUMENT_STRING_LONG(ARGUMENT_VERSION), ARGUMENT_VERSION),
			};

		enum {
			ARGUMENT_INTERACTIVE_APU = 0,
			ARGUMENT_INTERACTIVE_CPU,
#ifndef NDEBUG
			ARGUMENT_INTERACTIVE_DEBUG,
#endif // NDEBUG
			ARGUMENT_INTERACTIVE_DISPLAY,
			ARGUMENT_INTERACTIVE_EXIT,
			ARGUMENT_INTERACTIVE_FRAME,
			ARGUMENT_INTERACTIVE_HELP,
			ARGUMENT_INTERACTIVE_JOYPAD,
			ARGUMENT_INTERACTIVE_MAPPER,
			ARGUMENT_INTERACTIVE_PAUSE,
			ARGUMENT_INTERACTIVE_PPU,
			ARGUMENT_INTERACTIVE_RESTART,
			ARGUMENT_INTERACTIVE_RUN,
			ARGUMENT_INTERACTIVE_STATUS,
			ARGUMENT_INTERACTIVE_STEP,
			ARGUMENT_INTERACTIVE_STOP,
			ARGUMENT_INTERACTIVE_VERSION,
		};

		#define ARGUMENT_INTERACTIVE_MAX ARGUMENT_INTERACTIVE_VERSION

		static const std::string ARGUMENT_INTERACTIVE_STR[] = {
			"apu", "cpu",
#ifndef NDEBUG
			"debug",
#endif // NDEBUG
			"display", "exit", "frame", "help", "joypad", "mapper", "pause",
			"ppu", "restart", "run", "status", "step", "stop", "version",
			};

		#define ARGUMENT_INTERACTIVE_STRING(_TYPE_) \
			(((_TYPE_) > ARGUMENT_INTERACTIVE_MAX) ? STRING_UNKNOWN : \
				STRING_CHECK(ARGUMENT_INTERACTIVE_STR[_TYPE_]))

		static const std::string ARGUMENT_INTERACTIVE_STR_DESC[] = {
			"Display apu state",
			"Display/Set cpu state",
#ifndef NDEBUG
			"Enable/Disable debug mode",
#endif // NDEBUG
			"Display/Set display state",
			"Exit interactive mode",
			"Display frame count",
			"Display help information",
			"Display/Set joypad state",
			"Display mapper state",
			"Pause emulation",
			"Display/Set ppu state",
			"Restart emulation",
			"Run/Unpause emulation",
			"Display emulation status",
			"Step emulation through a command",
			"Stop emulation",
			"Display version information",
			};

		#define ARGUMENT_INTERACTIVE_STRING_DESCRIPTION(_TYPE_) \
			(((_TYPE_) > ARGUMENT_INTERACTIVE_MAX) ? STRING_UNKNOWN : \
				STRING_CHECK(ARGUMENT_INTERACTIVE_STR_DESC[_TYPE_]))

		static const std::map<std::string, uint32_t> ARGUMENT_INTERACTIVE_MAP = {
			std::make_pair(ARGUMENT_INTERACTIVE_STRING(ARGUMENT_INTERACTIVE_APU), ARGUMENT_INTERACTIVE_APU),
			std::make_pair(ARGUMENT_INTERACTIVE_STRING(ARGUMENT_INTERACTIVE_CPU), ARGUMENT_INTERACTIVE_CPU),
#ifndef NDEBUG
			std::make_pair(ARGUMENT_INTERACTIVE_STRING(ARGUMENT_INTERACTIVE_DEBUG), ARGUMENT_INTERACTIVE_DEBUG),
#endif // NDEBUG
			std::make_pair(ARGUMENT_INTERACTIVE_STRING(ARGUMENT_INTERACTIVE_DISPLAY), ARGUMENT_INTERACTIVE_DISPLAY),
			std::make_pair(ARGUMENT_INTERACTIVE_STRING(ARGUMENT_INTERACTIVE_EXIT), ARGUMENT_INTERACTIVE_EXIT),
			std::make_pair(ARGUMENT_INTERACTIVE_STRING(ARGUMENT_INTERACTIVE_FRAME), ARGUMENT_INTERACTIVE_FRAME),
			std::make_pair(ARGUMENT_INTERACTIVE_STRING(ARGUMENT_INTERACTIVE_HELP), ARGUMENT_INTERACTIVE_HELP),
			std::make_pair(ARGUMENT_INTERACTIVE_STRING(ARGUMENT_INTERACTIVE_JOYPAD), ARGUMENT_INTERACTIVE_JOYPAD),
			std::make_pair(ARGUMENT_INTERACTIVE_STRING(ARGUMENT_INTERACTIVE_MAPPER), ARGUMENT_INTERACTIVE_MAPPER),
			std::make_pair(ARGUMENT_INTERACTIVE_STRING(ARGUMENT_INTERACTIVE_PAUSE), ARGUMENT_INTERACTIVE_PAUSE),
			std::make_pair(ARGUMENT_INTERACTIVE_STRING(ARGUMENT_INTERACTIVE_PPU), ARGUMENT_INTERACTIVE_PPU),
			std::make_pair(ARGUMENT_INTERACTIVE_STRING(ARGUMENT_INTERACTIVE_RESTART), ARGUMENT_INTERACTIVE_RESTART),
			std::make_pair(ARGUMENT_INTERACTIVE_STRING(ARGUMENT_INTERACTIVE_RUN), ARGUMENT_INTERACTIVE_RUN),
			std::make_pair(ARGUMENT_INTERACTIVE_STRING(ARGUMENT_INTERACTIVE_STATUS), ARGUMENT_INTERACTIVE_STATUS),
			std::make_pair(ARGUMENT_INTERACTIVE_STRING(ARGUMENT_INTERACTIVE_STEP), ARGUMENT_INTERACTIVE_STEP),
			std::make_pair(ARGUMENT_INTERACTIVE_STRING(ARGUMENT_INTERACTIVE_STOP), ARGUMENT_INTERACTIVE_STOP),
			std::make_pair(ARGUMENT_INTERACTIVE_STRING(ARGUMENT_INTERACTIVE_VERSION), ARGUMENT_INTERACTIVE_VERSION),
			};

		enum {
			ARGUMENT_INTERACTIVE_SUBCOMMAND_CYCLE = 0,
			ARGUMENT_INTERACTIVE_SUBCOMMAND_DOT,
			ARGUMENT_INTERACTIVE_SUBCOMMAND_GET,
			ARGUMENT_INTERACTIVE_SUBCOMMAND_HELP,
			ARGUMENT_INTERACTIVE_SUBCOMMAND_HIDE,
			ARGUMENT_INTERACTIVE_SUBCOMMAND_IRQ,
			ARGUMENT_INTERACTIVE_SUBCOMMAND_NMI,
			ARGUMENT_INTERACTIVE_SUBCOMMAND_PORT,
			ARGUMENT_INTERACTIVE_SUBCOMMAND_PRESENT,
			ARGUMENT_INTERACTIVE_SUBCOMMAND_REGISTER,
			ARGUMENT_INTERACTIVE_SUBCOMMAND_RESET,
			ARGUMENT_INTERACTIVE_SUBCOMMAND_SCANLINE,
			ARGUMENT_INTERACTIVE_SUBCOMMAND_SET,
			ARGUMENT_INTERACTIVE_SUBCOMMAND_SHOW,
			ARGUMENT_INTERACTIVE_SUBCOMMAND_STATUS,
			ARGUMENT_INTERACTIVE_SUBCOMMAND_STROBE,
			ARGUMENT_INTERACTIVE_SUBCOMMAND_WATCH,
			ARGUMENT_INTERACTIVE_SUBCOMMAND_UNKNOWN,
		};

		#define ARGUMENT_INTERACTIVE_SUBCOMMAND_MAX ARGUMENT_INTERACTIVE_SUBCOMMAND_WATCH

		static const std::string ARGUMENT_INTERACTIVE_SUBCOMMAND_STR[] = {
			"cycle", "dot", "get", "help", "hide", "irq", "nmi", "port", "present",
			"reg", "reset", "scanline", "set", "show", "status", "strobe", "watch",
			};

		#define ARGUMENT_INTERACTIVE_SUBCOMMAND_STRING(_TYPE_) \
			(((_TYPE_) > ARGUMENT_INTERACTIVE_SUBCOMMAND_MAX) ? STRING_UNKNOWN : \
				STRING_CHECK(ARGUMENT_INTERACTIVE_SUBCOMMAND_STR[_TYPE_]))

		static const std::string ARGUMENT_INTERACTIVE_SUBCOMMAND_STR_DESC[] = {
			"Display current cycle count",
			"Display current dot",
			"Display memory value",
			"Display help information",
			"Hide display window",
			"Signal maskable interrupt",
			"Signal non-maskable interrupt",
			"Display/Set port value",
			"Refresh display window",
			"Display/Set register value",
			"Signal reset",
			"Display current scanline",
			"Set memory value",
			"Show display window",
			"Display status information",
			"Set/Clear strobe",
			"Set/Clear watch memory addresses",
			};

		#define ARGUMENT_INTERACTIVE_SUBCOMMAND_STRING_DESCRIPTION(_TYPE_) \
			(((_TYPE_) > ARGUMENT_INTERACTIVE_SUBCOMMAND_MAX) ? STRING_UNKNOWN : \
				STRING_CHECK(ARGUMENT_INTERACTIVE_SUBCOMMAND_STR_DESC[_TYPE_]))

		static const std::string ARGUMENT_INTERACTIVE_SUBCOMMAND_STR_FORM[] = {
			"",
			"",
			"<address> <offset>",
			"",
			"",
			"",
			"",
			"<port> [<value>]",
			"",
			"<register> [<value>]",
			"",
			"",
			"[<address>] <value>",
			"",
			"",
			"<value>",
			"[<address> | clear]",
			};

		#define ARGUMENT_INTERACTIVE_SUBCOMMAND_STRING_FORMAT(_TYPE_) \
			(((_TYPE_) > ARGUMENT_INTERACTIVE_SUBCOMMAND_MAX) ? STRING_UNKNOWN : \
				ARGUMENT_INTERACTIVE_SUBCOMMAND_STR_FORM[_TYPE_])

		static const std::map<uint32_t, std::vector<uint32_t>> ARGUMENT_INTERACTIVE_SUB_MAP = {
			std::make_pair(ARGUMENT_INTERACTIVE_APU, std::vector<uint32_t>({ ARGUMENT_INTERACTIVE_SUBCOMMAND_HELP,
				ARGUMENT_INTERACTIVE_SUBCOMMAND_STATUS, })),
			std::make_pair(ARGUMENT_INTERACTIVE_CPU, std::vector<uint32_t>({ ARGUMENT_INTERACTIVE_SUBCOMMAND_CYCLE,
				ARGUMENT_INTERACTIVE_SUBCOMMAND_GET, ARGUMENT_INTERACTIVE_SUBCOMMAND_HELP,
				ARGUMENT_INTERACTIVE_SUBCOMMAND_IRQ, ARGUMENT_INTERACTIVE_SUBCOMMAND_NMI,
				ARGUMENT_INTERACTIVE_SUBCOMMAND_REGISTER, ARGUMENT_INTERACTIVE_SUBCOMMAND_RESET,
				ARGUMENT_INTERACTIVE_SUBCOMMAND_SET, ARGUMENT_INTERACTIVE_SUBCOMMAND_STATUS,
				ARGUMENT_INTERACTIVE_SUBCOMMAND_WATCH, })),
#ifndef NDEBUG
			std::make_pair(ARGUMENT_INTERACTIVE_DEBUG, std::vector<uint32_t>({ ARGUMENT_INTERACTIVE_SUBCOMMAND_HELP,
				ARGUMENT_INTERACTIVE_SUBCOMMAND_SET, ARGUMENT_INTERACTIVE_SUBCOMMAND_STATUS, })),
#endif // NDEBUG
			std::make_pair(ARGUMENT_INTERACTIVE_DISPLAY, std::vector<uint32_t>({ ARGUMENT_INTERACTIVE_SUBCOMMAND_HELP,
				ARGUMENT_INTERACTIVE_SUBCOMMAND_HIDE, ARGUMENT_INTERACTIVE_SUBCOMMAND_PRESENT,
				ARGUMENT_INTERACTIVE_SUBCOMMAND_SHOW, ARGUMENT_INTERACTIVE_SUBCOMMAND_STATUS })),
			std::make_pair(ARGUMENT_INTERACTIVE_EXIT, std::vector<uint32_t>()),
			std::make_pair(ARGUMENT_INTERACTIVE_FRAME, std::vector<uint32_t>()),
			std::make_pair(ARGUMENT_INTERACTIVE_HELP, std::vector<uint32_t>()),
			std::make_pair(ARGUMENT_INTERACTIVE_JOYPAD, std::vector<uint32_t>({ ARGUMENT_INTERACTIVE_SUBCOMMAND_HELP,
				ARGUMENT_INTERACTIVE_SUBCOMMAND_STATUS, ARGUMENT_INTERACTIVE_SUBCOMMAND_STROBE, })),
			std::make_pair(ARGUMENT_INTERACTIVE_MAPPER, std::vector<uint32_t>({ ARGUMENT_INTERACTIVE_SUBCOMMAND_HELP,
				ARGUMENT_INTERACTIVE_SUBCOMMAND_STATUS, })),
			std::make_pair(ARGUMENT_INTERACTIVE_PAUSE, std::vector<uint32_t>()),
			std::make_pair(ARGUMENT_INTERACTIVE_PPU, std::vector<uint32_t>({ ARGUMENT_INTERACTIVE_SUBCOMMAND_CYCLE,
				ARGUMENT_INTERACTIVE_SUBCOMMAND_DOT, ARGUMENT_INTERACTIVE_SUBCOMMAND_GET,
				ARGUMENT_INTERACTIVE_SUBCOMMAND_HELP, ARGUMENT_INTERACTIVE_SUBCOMMAND_PORT,
				ARGUMENT_INTERACTIVE_SUBCOMMAND_SCANLINE, ARGUMENT_INTERACTIVE_SUBCOMMAND_SET,
				ARGUMENT_INTERACTIVE_SUBCOMMAND_STATUS, ARGUMENT_INTERACTIVE_SUBCOMMAND_WATCH, })),
			std::make_pair(ARGUMENT_INTERACTIVE_RESTART, std::vector<uint32_t>()),
			std::make_pair(ARGUMENT_INTERACTIVE_RUN, std::vector<uint32_t>()),
			std::make_pair(ARGUMENT_INTERACTIVE_STATUS, std::vector<uint32_t>()),
			std::make_pair(ARGUMENT_INTERACTIVE_STEP, std::vector<uint32_t>()),
			std::make_pair(ARGUMENT_INTERACTIVE_STOP, std::vector<uint32_t>()),
			std::make_pair(ARGUMENT_INTERACTIVE_VERSION, std::vector<uint32_t>()),
			};

		static const uint8_t ARGUMENT_INTERACTIVE_SUBCOMMAND_CYCLE_SUPPORT[] = {
			ARGUMENT_INTERACTIVE_CPU, ARGUMENT_INTERACTIVE_PPU,
			};

		static const uint8_t ARGUMENT_INTERACTIVE_SUBCOMMAND_DOT_SUPPORT[] = {
			ARGUMENT_INTERACTIVE_PPU,
			};

		static const uint8_t ARGUMENT_INTERACTIVE_SUBCOMMAND_GET_SUPPORT[] = {
			ARGUMENT_INTERACTIVE_CPU, ARGUMENT_INTERACTIVE_PPU,
			};

		static const uint8_t ARGUMENT_INTERACTIVE_SUBCOMMAND_HELP_SUPPORT[] = {
			ARGUMENT_INTERACTIVE_APU, ARGUMENT_INTERACTIVE_CPU,
#ifndef NDEBUG
			ARGUMENT_INTERACTIVE_DEBUG,
#endif // NDEBUG
			ARGUMENT_INTERACTIVE_DISPLAY, ARGUMENT_INTERACTIVE_JOYPAD, ARGUMENT_INTERACTIVE_MAPPER,
			ARGUMENT_INTERACTIVE_PPU,
			};

		static const uint8_t ARGUMENT_INTERACTIVE_SUBCOMMAND_HIDE_SUPPORT[] = {
			ARGUMENT_INTERACTIVE_DISPLAY,
			};

		static const uint8_t ARGUMENT_INTERACTIVE_SUBCOMMAND_IRQ_SUPPORT[] = {
			ARGUMENT_INTERACTIVE_CPU,
			};

		static const uint8_t ARGUMENT_INTERACTIVE_SUBCOMMAND_NMI_SUPPORT[] = {
			ARGUMENT_INTERACTIVE_CPU,
			};

		static const uint8_t ARGUMENT_INTERACTIVE_SUBCOMMAND_PORT_SUPPORT[] = {
			ARGUMENT_INTERACTIVE_PPU,
			};

		static const uint8_t ARGUMENT_INTERACTIVE_SUBCOMMAND_PRESENT_SUPPORT[] = {
			ARGUMENT_INTERACTIVE_DISPLAY,
			};

		static const uint8_t ARGUMENT_INTERACTIVE_SUBCOMMAND_REGISTER_SUPPORT[] = {
			ARGUMENT_INTERACTIVE_CPU,
			};

		static const uint8_t ARGUMENT_INTERACTIVE_SUBCOMMAND_RESET_SUPPORT[] = {
			ARGUMENT_INTERACTIVE_CPU,
			};

		static const uint8_t ARGUMENT_INTERACTIVE_SUBCOMMAND_SCANLINE_SUPPORT[] = {
			ARGUMENT_INTERACTIVE_PPU,
			};

		static const uint8_t ARGUMENT_INTERACTIVE_SUBCOMMAND_SET_SUPPORT[] = {
			ARGUMENT_INTERACTIVE_CPU,
#ifndef NDEBUG
			ARGUMENT_INTERACTIVE_DEBUG,
#endif // NDEBUG
			ARGUMENT_INTERACTIVE_PPU,
			};

		static const uint8_t ARGUMENT_INTERACTIVE_SUBCOMMAND_SHOW_SUPPORT[] = {
			ARGUMENT_INTERACTIVE_DISPLAY,
			};

		static const uint8_t ARGUMENT_INTERACTIVE_SUBCOMMAND_STATUS_SUPPORT[] = {
			ARGUMENT_INTERACTIVE_APU, ARGUMENT_INTERACTIVE_CPU,
#ifndef NDEBUG
			ARGUMENT_INTERACTIVE_DEBUG,
#endif // NDEBUG
			ARGUMENT_INTERACTIVE_DISPLAY, ARGUMENT_INTERACTIVE_JOYPAD,
			ARGUMENT_INTERACTIVE_MAPPER, ARGUMENT_INTERACTIVE_PPU,
			};

		static const uint8_t ARGUMENT_INTERACTIVE_SUBCOMMAND_STROBE_SUPPORT[] = {
			ARGUMENT_INTERACTIVE_JOYPAD,
			};

		static const uint8_t ARGUMENT_INTERACTIVE_SUBCOMMAND_WATCH_SUPPORT[] = {
			ARGUMENT_INTERACTIVE_CPU, ARGUMENT_INTERACTIVE_PPU,
			};

		static const std::map<std::string, std::pair<uint32_t, std::set<uint32_t>>> ARGUMENT_INTERACTIVE_SUBCOMMAND_MAP = {
			std::make_pair(ARGUMENT_INTERACTIVE_SUBCOMMAND_STRING(ARGUMENT_INTERACTIVE_SUBCOMMAND_CYCLE),
				std::make_pair(ARGUMENT_INTERACTIVE_SUBCOMMAND_CYCLE, std::set<uint32_t>(
					ARGUMENT_INTERACTIVE_SUBCOMMAND_CYCLE_SUPPORT, ARGUMENT_INTERACTIVE_SUBCOMMAND_CYCLE_SUPPORT
						+ sizeof(ARGUMENT_INTERACTIVE_SUBCOMMAND_CYCLE_SUPPORT)))),
			std::make_pair(ARGUMENT_INTERACTIVE_SUBCOMMAND_STRING(ARGUMENT_INTERACTIVE_SUBCOMMAND_DOT),
				std::make_pair(ARGUMENT_INTERACTIVE_SUBCOMMAND_DOT, std::set<uint32_t>(
					ARGUMENT_INTERACTIVE_SUBCOMMAND_DOT_SUPPORT, ARGUMENT_INTERACTIVE_SUBCOMMAND_DOT_SUPPORT
						+ sizeof(ARGUMENT_INTERACTIVE_SUBCOMMAND_DOT_SUPPORT)))),
			std::make_pair(ARGUMENT_INTERACTIVE_SUBCOMMAND_STRING(ARGUMENT_INTERACTIVE_SUBCOMMAND_GET),
				std::make_pair(ARGUMENT_INTERACTIVE_SUBCOMMAND_GET, std::set<uint32_t>(
					ARGUMENT_INTERACTIVE_SUBCOMMAND_GET_SUPPORT, ARGUMENT_INTERACTIVE_SUBCOMMAND_GET_SUPPORT
						+ sizeof(ARGUMENT_INTERACTIVE_SUBCOMMAND_GET_SUPPORT)))),
			std::make_pair(ARGUMENT_INTERACTIVE_SUBCOMMAND_STRING(ARGUMENT_INTERACTIVE_SUBCOMMAND_HELP),
				std::make_pair(ARGUMENT_INTERACTIVE_SUBCOMMAND_HELP, std::set<uint32_t>(
					ARGUMENT_INTERACTIVE_SUBCOMMAND_HELP_SUPPORT, ARGUMENT_INTERACTIVE_SUBCOMMAND_HELP_SUPPORT
						+ sizeof(ARGUMENT_INTERACTIVE_SUBCOMMAND_HELP_SUPPORT)))),
			std::make_pair(ARGUMENT_INTERACTIVE_SUBCOMMAND_STRING(ARGUMENT_INTERACTIVE_SUBCOMMAND_HIDE),
				std::make_pair(ARGUMENT_INTERACTIVE_SUBCOMMAND_HIDE, std::set<uint32_t>(
					ARGUMENT_INTERACTIVE_SUBCOMMAND_HIDE_SUPPORT, ARGUMENT_INTERACTIVE_SUBCOMMAND_HIDE_SUPPORT
						+ sizeof(ARGUMENT_INTERACTIVE_SUBCOMMAND_HIDE_SUPPORT)))),
			std::make_pair(ARGUMENT_INTERACTIVE_SUBCOMMAND_STRING(ARGUMENT_INTERACTIVE_SUBCOMMAND_IRQ),
				std::make_pair(ARGUMENT_INTERACTIVE_SUBCOMMAND_IRQ, std::set<uint32_t>(
					ARGUMENT_INTERACTIVE_SUBCOMMAND_IRQ_SUPPORT, ARGUMENT_INTERACTIVE_SUBCOMMAND_IRQ_SUPPORT
						+ sizeof(ARGUMENT_INTERACTIVE_SUBCOMMAND_IRQ_SUPPORT)))),
			std::make_pair(ARGUMENT_INTERACTIVE_SUBCOMMAND_STRING(ARGUMENT_INTERACTIVE_SUBCOMMAND_NMI),
				std::make_pair(ARGUMENT_INTERACTIVE_SUBCOMMAND_NMI, std::set<uint32_t>(
					ARGUMENT_INTERACTIVE_SUBCOMMAND_NMI_SUPPORT, ARGUMENT_INTERACTIVE_SUBCOMMAND_NMI_SUPPORT
						+ sizeof(ARGUMENT_INTERACTIVE_SUBCOMMAND_NMI_SUPPORT)))),
			std::make_pair(ARGUMENT_INTERACTIVE_SUBCOMMAND_STRING(ARGUMENT_INTERACTIVE_SUBCOMMAND_PORT),
				std::make_pair(ARGUMENT_INTERACTIVE_SUBCOMMAND_PORT, std::set<uint32_t>(
					ARGUMENT_INTERACTIVE_SUBCOMMAND_PORT_SUPPORT, ARGUMENT_INTERACTIVE_SUBCOMMAND_PORT_SUPPORT
						+ sizeof(ARGUMENT_INTERACTIVE_SUBCOMMAND_PORT_SUPPORT)))),
			std::make_pair(ARGUMENT_INTERACTIVE_SUBCOMMAND_STRING(ARGUMENT_INTERACTIVE_SUBCOMMAND_PRESENT),
				std::make_pair(ARGUMENT_INTERACTIVE_SUBCOMMAND_PRESENT, std::set<uint32_t>(
					ARGUMENT_INTERACTIVE_SUBCOMMAND_PRESENT_SUPPORT, ARGUMENT_INTERACTIVE_SUBCOMMAND_PRESENT_SUPPORT
						+ sizeof(ARGUMENT_INTERACTIVE_SUBCOMMAND_PRESENT_SUPPORT)))),
			std::make_pair(ARGUMENT_INTERACTIVE_SUBCOMMAND_STRING(ARGUMENT_INTERACTIVE_SUBCOMMAND_REGISTER),
				std::make_pair(ARGUMENT_INTERACTIVE_SUBCOMMAND_REGISTER, std::set<uint32_t>(
					ARGUMENT_INTERACTIVE_SUBCOMMAND_REGISTER_SUPPORT, ARGUMENT_INTERACTIVE_SUBCOMMAND_REGISTER_SUPPORT
						+ sizeof(ARGUMENT_INTERACTIVE_SUBCOMMAND_REGISTER_SUPPORT)))),
			std::make_pair(ARGUMENT_INTERACTIVE_SUBCOMMAND_STRING(ARGUMENT_INTERACTIVE_SUBCOMMAND_RESET),
				std::make_pair(ARGUMENT_INTERACTIVE_SUBCOMMAND_RESET, std::set<uint32_t>(
					ARGUMENT_INTERACTIVE_SUBCOMMAND_RESET_SUPPORT, ARGUMENT_INTERACTIVE_SUBCOMMAND_RESET_SUPPORT
						+ sizeof(ARGUMENT_INTERACTIVE_SUBCOMMAND_RESET_SUPPORT)))),
			std::make_pair(ARGUMENT_INTERACTIVE_SUBCOMMAND_STRING(ARGUMENT_INTERACTIVE_SUBCOMMAND_SCANLINE),
				std::make_pair(ARGUMENT_INTERACTIVE_SUBCOMMAND_SCANLINE, std::set<uint32_t>(
					ARGUMENT_INTERACTIVE_SUBCOMMAND_SCANLINE_SUPPORT, ARGUMENT_INTERACTIVE_SUBCOMMAND_SCANLINE_SUPPORT
						+ sizeof(ARGUMENT_INTERACTIVE_SUBCOMMAND_SCANLINE_SUPPORT)))),
			std::make_pair(ARGUMENT_INTERACTIVE_SUBCOMMAND_STRING(ARGUMENT_INTERACTIVE_SUBCOMMAND_SET),
				std::make_pair(ARGUMENT_INTERACTIVE_SUBCOMMAND_SET, std::set<uint32_t>(
					ARGUMENT_INTERACTIVE_SUBCOMMAND_SET_SUPPORT, ARGUMENT_INTERACTIVE_SUBCOMMAND_SET_SUPPORT
						+ sizeof(ARGUMENT_INTERACTIVE_SUBCOMMAND_SET_SUPPORT)))),
			std::make_pair(ARGUMENT_INTERACTIVE_SUBCOMMAND_STRING(ARGUMENT_INTERACTIVE_SUBCOMMAND_SHOW),
				std::make_pair(ARGUMENT_INTERACTIVE_SUBCOMMAND_SHOW, std::set<uint32_t>(
					ARGUMENT_INTERACTIVE_SUBCOMMAND_SHOW_SUPPORT, ARGUMENT_INTERACTIVE_SUBCOMMAND_SHOW_SUPPORT
						+ sizeof(ARGUMENT_INTERACTIVE_SUBCOMMAND_SHOW_SUPPORT)))),
			std::make_pair(ARGUMENT_INTERACTIVE_SUBCOMMAND_STRING(ARGUMENT_INTERACTIVE_SUBCOMMAND_STATUS),
				std::make_pair(ARGUMENT_INTERACTIVE_SUBCOMMAND_STATUS, std::set<uint32_t>(
					ARGUMENT_INTERACTIVE_SUBCOMMAND_STATUS_SUPPORT, ARGUMENT_INTERACTIVE_SUBCOMMAND_STATUS_SUPPORT
						+ sizeof(ARGUMENT_INTERACTIVE_SUBCOMMAND_STATUS_SUPPORT)))),
			std::make_pair(ARGUMENT_INTERACTIVE_SUBCOMMAND_STRING(ARGUMENT_INTERACTIVE_SUBCOMMAND_STROBE),
				std::make_pair(ARGUMENT_INTERACTIVE_SUBCOMMAND_STROBE, std::set<uint32_t>(
					ARGUMENT_INTERACTIVE_SUBCOMMAND_STROBE_SUPPORT, ARGUMENT_INTERACTIVE_SUBCOMMAND_STROBE_SUPPORT
						+ sizeof(ARGUMENT_INTERACTIVE_SUBCOMMAND_STROBE_SUPPORT)))),
			std::make_pair(ARGUMENT_INTERACTIVE_SUBCOMMAND_STRING(ARGUMENT_INTERACTIVE_SUBCOMMAND_WATCH),
				std::make_pair(ARGUMENT_INTERACTIVE_SUBCOMMAND_WATCH, std::set<uint32_t>(
					ARGUMENT_INTERACTIVE_SUBCOMMAND_WATCH_SUPPORT, ARGUMENT_INTERACTIVE_SUBCOMMAND_WATCH_SUPPORT
						+ sizeof(ARGUMENT_INTERACTIVE_SUBCOMMAND_WATCH_SUPPORT)))),
			};

		#define PROMPT_COLOR_START "\x1b[94m"
		#define PROMPT_COLOR_STOP "\x1b[0m"

		enum {
			SUBCOMMAND_ARGUMENT_ADDRESS = 0,
			SUBCOMMAND_ARGUMENT_VALUE,
		};

		#define SUBCOMMAND_ARGUMENT_MAX SUBCOMMAND_ARGUMENT_VALUE

		enum {
			SUBCOMMAND_ARGUMENT_PORT_PPU_ADDRESS = 0,
			SUBCOMMAND_ARGUMENT_PORT_PPU_CONTROL,
			SUBCOMMAND_ARGUMENT_PORT_PPU_DATA,
			SUBCOMMAND_ARGUMENT_PORT_PPU_MASK,
			SUBCOMMAND_ARGUMENT_PORT_PPU_OAM_ADDRESS,
			SUBCOMMAND_ARGUMENT_PORT_PPU_OAM_DATA,
			SUBCOMMAND_ARGUMENT_PORT_PPU_SCROLL,
			SUBCOMMAND_ARGUMENT_PORT_PPU_STATUS,
		};

		#define SUBCOMMAND_ARGUMENT_PORT_PPU_MAX SUBCOMMAND_ARGUMENT_PORT_PPU_STATUS

		static const std::string SUBCOMMAND_ARGUMENT_PORT_PPU_STR[] = {
			"address", "control", "data", "mask", "oam_address", "oam_data", "scroll", "status",
			};

		#define SUBCOMMAND_ARGUMENT_PORT_PPU_STRING(_TYPE_) \
			(((_TYPE_) > SUBCOMMAND_ARGUMENT_PORT_PPU_MAX) ? STRING_UNKNOWN : \
				STRING_CHECK(SUBCOMMAND_ARGUMENT_PORT_PPU_STR[_TYPE_]))

		static const std::map<std::string, uint32_t> SUBCOMMAND_ARGUMENT_PORT_PPU_MAP = {
			std::make_pair(SUBCOMMAND_ARGUMENT_PORT_PPU_STRING(SUBCOMMAND_ARGUMENT_PORT_PPU_ADDRESS),
				SUBCOMMAND_ARGUMENT_PORT_PPU_ADDRESS),
			std::make_pair(SUBCOMMAND_ARGUMENT_PORT_PPU_STRING(SUBCOMMAND_ARGUMENT_PORT_PPU_CONTROL),
				SUBCOMMAND_ARGUMENT_PORT_PPU_CONTROL),
			std::make_pair(SUBCOMMAND_ARGUMENT_PORT_PPU_STRING(SUBCOMMAND_ARGUMENT_PORT_PPU_DATA),
				SUBCOMMAND_ARGUMENT_PORT_PPU_DATA),
			std::make_pair(SUBCOMMAND_ARGUMENT_PORT_PPU_STRING(SUBCOMMAND_ARGUMENT_PORT_PPU_MASK),
				SUBCOMMAND_ARGUMENT_PORT_PPU_MASK),
			std::make_pair(SUBCOMMAND_ARGUMENT_PORT_PPU_STRING(SUBCOMMAND_ARGUMENT_PORT_PPU_OAM_ADDRESS),
				SUBCOMMAND_ARGUMENT_PORT_PPU_OAM_ADDRESS),
			std::make_pair(SUBCOMMAND_ARGUMENT_PORT_PPU_STRING(SUBCOMMAND_ARGUMENT_PORT_PPU_OAM_DATA),
				SUBCOMMAND_ARGUMENT_PORT_PPU_OAM_DATA),
			std::make_pair(SUBCOMMAND_ARGUMENT_PORT_PPU_STRING(SUBCOMMAND_ARGUMENT_PORT_PPU_SCROLL),
				SUBCOMMAND_ARGUMENT_PORT_PPU_SCROLL),
			std::make_pair(SUBCOMMAND_ARGUMENT_PORT_PPU_STRING(SUBCOMMAND_ARGUMENT_PORT_PPU_STATUS),
				SUBCOMMAND_ARGUMENT_PORT_PPU_STATUS),
			};

		enum {
			SUBCOMMAND_ARGUMENT_REGISTER_CPU_ACCUMULATOR = 0,
			SUBCOMMAND_ARGUMENT_REGISTER_CPU_FLAGS,
			SUBCOMMAND_ARGUMENT_REGISTER_CPU_INDEX_X,
			SUBCOMMAND_ARGUMENT_REGISTER_CPU_INDEX_Y,
			SUBCOMMAND_ARGUMENT_REGISTER_CPU_PROGRAM_COUNTER,
			SUBCOMMAND_ARGUMENT_REGISTER_CPU_STACK_POINTER,
		};

		#define SUBCOMMAND_ARGUMENT_REGISTER_CPU_MAX SUBCOMMAND_ARGUMENT_REGISTER_CPU_STACK_POINTER

		static const std::string SUBCOMMAND_ARGUMENT_REGISTER_CPU_STR[] = {
			"a", "p", "x", "y", "pc", "sp",
			};

		#define SUBCOMMAND_ARGUMENT_REGISTER_CPU_STRING(_TYPE_) \
			(((_TYPE_) > SUBCOMMAND_ARGUMENT_REGISTER_CPU_MAX) ? STRING_UNKNOWN : \
				STRING_CHECK(SUBCOMMAND_ARGUMENT_REGISTER_CPU_STR[_TYPE_]))

		static const std::map<std::string, uint32_t> SUBCOMMAND_ARGUMENT_REGISTER_CPU_MAP = {
			std::make_pair(SUBCOMMAND_ARGUMENT_REGISTER_CPU_STRING(SUBCOMMAND_ARGUMENT_REGISTER_CPU_ACCUMULATOR),
				SUBCOMMAND_ARGUMENT_REGISTER_CPU_ACCUMULATOR),
			std::make_pair(SUBCOMMAND_ARGUMENT_REGISTER_CPU_STRING(SUBCOMMAND_ARGUMENT_REGISTER_CPU_FLAGS),
				SUBCOMMAND_ARGUMENT_REGISTER_CPU_FLAGS),
			std::make_pair(SUBCOMMAND_ARGUMENT_REGISTER_CPU_STRING(SUBCOMMAND_ARGUMENT_REGISTER_CPU_INDEX_X),
				SUBCOMMAND_ARGUMENT_REGISTER_CPU_INDEX_X),
			std::make_pair(SUBCOMMAND_ARGUMENT_REGISTER_CPU_STRING(SUBCOMMAND_ARGUMENT_REGISTER_CPU_INDEX_Y),
				SUBCOMMAND_ARGUMENT_REGISTER_CPU_INDEX_Y),
			std::make_pair(SUBCOMMAND_ARGUMENT_REGISTER_CPU_STRING(SUBCOMMAND_ARGUMENT_REGISTER_CPU_PROGRAM_COUNTER),
				SUBCOMMAND_ARGUMENT_REGISTER_CPU_PROGRAM_COUNTER),
			std::make_pair(SUBCOMMAND_ARGUMENT_REGISTER_CPU_STRING(SUBCOMMAND_ARGUMENT_REGISTER_CPU_STACK_POINTER),
				SUBCOMMAND_ARGUMENT_REGISTER_CPU_STACK_POINTER),
			};
	}
}

#endif // NESCC_TOOL_RUNNER_TYPE_H_
